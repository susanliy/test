@mixin flex($justify-content: center, $align-items: center, $dir: row) {
  display: flex;
  flex-direction: $dir;
  justify-content: $justify-content;
  align-items: $align-items;
}

// 单行截断
@mixin ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
* 多行截断
* {number} 截断行数
*/
@mixin line-clamp($lines) {
  $box: -webkit-box;

  display: $box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

/**
* 真.1px边框
* {list}: 多个方向边框, 默认值为bottom, 你可以根据需要传入(top, left, bottom, right) 4个方向;
* {color} 边框的颜色, 默认#ccc;
* {list} 4个圆角半径, 默认0;
* {string} 一个高级设置, 一般都不需要改动, 由于细边框的实现使用了css的伪类, 所以为了规避可能出现的样式冲突, 我们可以自己指定使用:after还是:before, 默认after;
*/
@mixin thinder-border(
  $directionMaps: bottom,
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0,
  ),
  $position: after
) {
  // 是否只有一个方向
  $isOnlyOneDir: string==type-of($directionMaps);

  @if ($isOnlyOneDir) {
    $directionMaps: ($directionMaps);
  }

  @each $directionMap in $directionMaps {
    border-#{$directionMap}: 1px solid $color;
  }

  // 判断圆角是list还是number
  @if (list==type-of($radius)) {
    border-radius: nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
  } @else {
    border-radius: $radius;
  }

  @media only screen and (min-device-pixel-ratio: 2) {
    & {
      @each $directionMap in $directionMaps {
        border-#{$directionMap}: none;
      }

      position: relative;
    }

    &:#{$position} {
      @each $directionMap in $directionMaps {
        border-#{$directionMap}-width: 1px;
      }

      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) *
          2
          nth($radius, 2) *
          2
          nth($radius, 3) *
          2
          nth($radius, 4) *
          2;
      } @else {
        border-radius: $radius * 2;
      }

      content: '';
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: 200%;
      height: 200%;
      transform: scale(0.5);
      box-sizing: border-box;
      padding: 1px;
      transform-origin: 0 0;
      pointer-events: none;
      border: 0 solid $color;
    }
  }

  @media only screen and (min-device-pixel-ratio: 3) {
    &:#{$position} {
      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) *
          3
          nth($radius, 2) *
          3
          nth($radius, 3) *
          3
          nth($radius, 4) *
          3;
      } @else {
        border-radius: $radius * 3;
      }

      width: 300%;
      height: 300%;
      transform: scale(0.3333);
    }
  }
}

// 清浮动
@mixin clearfix() {
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}

/**
* 画三角形
* {number} 三角形大小
* {color} 三角形颜色
* {string} 三角形位置
*/
@mixin arrow($size: 5px, $color: rgba(0, 0, 0, 0.6), $dir: bottom) {
  @if (bottom==$dir) {
    border-width: $size $size 0 $size;
    border-color: $color transparent transparent transparent;
  } @else if (top==$dir) {
    border-width: 0 $size $size $size;
    border-color: transparent transparent $color transparent;
  } @else if (right==$dir) {
    border-width: $size 0 $size $size;
    border-color: transparent transparent transparent $color;
  } @else if (left==$dir) {
    border-width: $size $size $size 0;
    border-color: transparent $color transparent transparent;
  }

  width: 0;
  height: 0;
  border-style: solid;
}

/**
* 增大可点击区域
* {number} 扩大面积大小，沿着当前组件边界当做起点向外计算
*/
@mixin click($size: 15px) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: -$size;
    right: -$size;
    bottom: -$size;
    left: -$size;
  }
}

/**
* 居中排列的方位
* flex-start | flex-end | center | space-between | space-around;
*/
@mixin justify-content($content) {
  justify-content: $content;
  align-items: center;
}
